{"version":3,"sources":["components/header/Form.js","components/header/Header.js","actions/index.js","components/weather/RenderDailyForecast.js","components/weather/RenderHourForecast.js","components/weather/RenderDeatils.js","components/weather/WeatherList.js","App.js","reducers/coordsReducer.js","reducers/index.js","index.js"],"names":["Form","onSubmit","useState","input","setInput","type","value","onChange","e","target","Header","this","props","getSearch","q","preventDefault","console","log","React","Component","connect","state","coords","city","dispatch","axios","get","params","appid","then","response","payload","RenderDailyForecast","data","date","Date","today","getDay","dayNum","days","rainChance","day","chance","pop","className","daily","map","dayName","style","display","alignItems","src","weather","icon","Math","round","temp","night","dt","RenderHourForecast","time","getHours","id","hourly","hour","RenderDetails","flexDirection","current","pressure","humidity","wind_speed","d","wind_deg","windDirection","WeatherList","useParams","getCoords","timezone","feels_like","renderCity","navigator","geolocation","getCurrentPosition","position","lat","latitude","lon","longitude","units","App","path","exact","coordsReducer","action","combineReducers","store","createStore","reducers","applyMiddleware","thunk","reactDom","render","document","querySelector"],"mappings":"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","file":"static/js/main.9b615a0e.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\n\r\nconst Form = ({ onSubmit }) => {\r\n    const [input, setInput] = useState('');\r\n\r\n    const onChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={() => onSubmit(input)}>\r\n            <input type='text' value={input} onChange={onChange}/>\r\n            <button>Search</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getSearch } from '../../actions/index';\r\nimport Form from './Form';\r\n\r\n\r\nclass Header extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getSearch('Tokio')\r\n    }\r\n\r\n\r\n    render() {\r\n        const onSubmit = (e, q) => {\r\n            e.preventDefault()\r\n            console.log(q)\r\n            this.props.getSearch(q)\r\n        }\r\n        return (\r\n            <div>\r\n                <Form onSubmit={onSubmit}/>\r\n            </div>\r\n    )\r\n}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { coords: state }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getSearch })(Header)","import axios from \"axios\";\r\n\r\nexport const getCoords = () => {\r\n    return dispatch => {\r\n        const geolocation = navigator.geolocation;\r\n        geolocation.getCurrentPosition((position) => [\r\n            axios.get(`\r\n            https://api.openweathermap.org/data/2.5/onecall`, {\r\n                params: {\r\n                    appid: \"0f37ce848fdf66d48b73f051d4ca6ad0\",\r\n                    lat: position.coords.latitude,\r\n                    lon: position.coords.longitude,\r\n                    units: 'metric'\r\n                }\r\n            }).then(response => {\r\n                dispatch({ type: 'GET_COORDS', payload: response})\r\n            })\r\n        ])\r\n    }\r\n}\r\nexport const getSearch = ( city ) => {\r\n    return dispatch => {\r\n        axios.get(`\r\n            https://pro.openweathermap.org/data/2.5/forecast/hourly`, {\r\n                params: {\r\n                    q: city,\r\n                    appid: \"50453c06daddb64bfb7c9056d0f6540c\"\r\n                }\r\n            }).then(response => {\r\n                dispatch({ type: 'GET_SEARCH', payload: response})\r\n            })\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nconst RenderDailyForecast = ({ data  }) => {\r\n        if(data){\r\n            const date = new Date;\r\n            const today = date.getDay();\r\n            console.log(date.getDay())\r\n            let dayNum = today;\r\n            const days = ['Monday','Tuesday','Wendsday','Thursday','Friday','Saturday','Sunday'];\r\n            \r\n            const rainChance = (day) => {\r\n                const chance = day.pop * 100;    \r\n                if(chance > 40){\r\n                    return <div className='chance'>{chance}%</div>\r\n                } else {\r\n                    return <div className='chance'></div>\r\n                }\r\n            }\r\n            return(\r\n                data.daily.map((day) => {\r\n                    if(dayNum === 7) {\r\n                        dayNum  = 1;\r\n                    } else {\r\n                        dayNum++;\r\n                    }\r\n                    const dayName = days[dayNum - 1];\r\n                    return (\r\n                       <div key={day.dt} className='daily_weather'>\r\n                        <h3>\r\n                         {dayName}\r\n                        </h3>\r\n                        <div style={{display: 'flex', alignItems: 'center'}}>\r\n                        <img src={`http://openweathermap.org/img/wn/${day.weather[0].icon}.png`} />\r\n                        {rainChance(day)}\r\n                        </div>\r\n                        <div className='daily_weather__temp'>\r\n                            <div>\r\n                        <p>\r\n                           {Math.round(day.temp.day)}&#176;C\r\n                        </p>\r\n                            </div><div>\r\n\r\n                        <p className='temp_night'>\r\n                        {Math.round(day.temp.night)}&#176;C\r\n                        </p>\r\n                            </div>\r\n                        </div>\r\n                       </div>\r\n                   )\r\n                })\r\n        )\r\n    } else {\r\n        return <div>Loading...</div>\r\n    }\r\n}\r\n\r\nexport default RenderDailyForecast","import React from 'react';\r\n\r\n\r\nconst RenderHourForecast = ({ data  }) => {\r\n\r\n        console.log(data)\r\n        if(data){\r\n            const date = new Date();\r\n            let time = date.getHours() - 1;\r\n            let id = 0;\r\n            return(\r\n                data.hourly.map((hour) => {\r\n                    id++\r\n                    if(id <= 13){\r\n                        if(time < 23) {\r\n                            time++;\r\n                        } else {\r\n                            time = 0;\r\n                        }\r\n                        return(\r\n                            <div key={hour.dt}>\r\n                            <div className='item'>\r\n                            <h4>\r\n                                {time}\r\n                            </h4>\r\n                            <div className='item_data'>\r\n                                <img src={`http://openweathermap.org/img/wn/${hour.weather[0].icon}.png`} />\r\n                               {Math.round(hour.temp)}&#176;C\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    )\r\n                }\r\n                })\r\n        )\r\n    } else {\r\n        return <div>Loading...</div>\r\n    }\r\n}\r\n\r\nexport default RenderHourForecast","import React from 'react';\r\n\r\nconst RenderDetails = ({ data }) => {\r\n\r\n    const windDirection = (data) => {\r\n        const d = Math.round(data.wind_deg / 10) - 1;\r\n        console.log(d)\r\n        const directions = ['N','N/NE','N/NE','NE','NE','E/NE','E/NE','E','E','E','E/SE','E/SE','SE','SE',\r\n                            'S/SE','S/SE','S','S','S','S/SW','S/SW','SW','SW','W/SW',\r\n                            'W/SW','W','W','W','W/NW','W/NW','NW','NW','N/NW','N/NW','N','N'];\r\n        return directions[d]\r\n    }\r\n\r\n    if(data){\r\n        return (\r\n            <div>\r\n            <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\r\n                Pressure: {data.current.pressure}hP\r\n                &nbsp;&nbsp;&nbsp;\r\n                Humidity: {data.current.humidity}%\r\n                <div>\r\n                       Wind Speed: {data.current.wind_speed}km/h \r\n                        &nbsp;\r\n                       Wind Direction: {windDirection(data.current)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n} else {\r\n    return <div></div>\r\n}\r\n}\r\n\r\nexport default RenderDetails","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getCoords } from '../../actions/index'\r\nimport RenderDailyForecast from './RenderDailyForecast';\r\nimport RenderHourForecast from './RenderHourForecast';\r\n\r\nimport '../../css/WeatherList.scss'\r\nimport RenderDetails from './RenderDeatils';\r\nimport { useParams } from 'react-router';\r\n\r\nclass WeatherList extends React.Component{\r\n    componentDidMount() {\r\n        const id = useParams;\r\n        this.props.getCoords();\r\n    }\r\n    renderCity() {\r\n        const data = this.props.coords.coords.data;\r\n        if(data){\r\n            return(\r\n                <div className={`city background`}>\r\n                    <h2>\r\n                    {data.timezone}\r\n                    </h2>\r\n                    <div className='city_tempNow'>\r\n                        <h1>\r\n                        {Math.round(data.current.temp)}&#176;C\r\n                        </h1>\r\n                        <h4>\r\n                        Feels Like: &nbsp;\r\n                        {Math.round(data.current.feels_like)}&#176;C\r\n                        </h4>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return <div>Loading...</div>\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div className='weather weather_top'>\r\n                    {this.renderCity()}\r\n                    <RenderDetails data={this.props.coords.coords.data} />\r\n                </div>\r\n                <div className='weather weather_hour'>\r\n                    <RenderHourForecast data={this.props.coords.coords.data} />\r\n                </div>\r\n                <div className='weather weather_daily'>\r\n                    <RenderDailyForecast data={this.props.coords.coords.data} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { coords: state }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getCoords })(WeatherList)\r\n","import React from 'react'\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Route } from 'react-router';\r\n\r\nimport Header from './components/header/Header';\r\nimport WeatherList from './components/weather/WeatherList'\r\n\r\nimport './css/App.scss';\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <BrowserRouter>\r\n        <div>\r\n        <Header />\r\n\r\n        <Route path='/' exact> \r\n            <WeatherList />\r\n        </Route>\r\n\r\n        <Route path='/:id' exact>\r\n            <WeatherList />\r\n        </Route>\r\n        \r\n        </div>\r\n        </BrowserRouter>\r\n        \r\n        )\r\n}\r\n\r\nexport default App","const coordsReducer = (state = [], action) => {\r\n    switch (action.type){\r\n        case \"GET_COORDS\":\r\n            return action.payload\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport default coordsReducer","import { combineReducers } from \"redux\";\r\nimport coordsReducer from \"./coordsReducer\";\r\n\r\n\r\nexport default combineReducers({\r\n    coords: coordsReducer\r\n})","import React from 'react'\r\nimport reactDom from 'react-dom'\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport App from './App';\r\nimport reducers from './reducers';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nreactDom.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n, document.querySelector(\"#root\"));"],"sourceRoot":""}